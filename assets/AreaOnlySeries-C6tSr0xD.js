import{r as b}from"./index-CTzypqlY.js";import{f as O,G as D,b as q,j as V}from"./withSize-Bqu-aQP_.js";import{a as M,c}from"./array-2GBN5xbU.js";import{w as T,c as G,x as j,y as x,l as z}from"./LineSeries-5eeGgUw4.js";function E(l,n,a){var p=null,o=c(!0),f=null,s=G,u=null,g=T(t);l=typeof l=="function"?l:l===void 0?j:c(+l),n=typeof n=="function"?n:n===void 0?c(0):c(+n),a=typeof a=="function"?a:a===void 0?x:c(+a);function t(e){var i,v,m,d=(e=M(e)).length,r,h=!1,w,N=new Array(d),A=new Array(d);for(f==null&&(u=s(w=g())),i=0;i<=d;++i){if(!(i<d&&o(r=e[i],i,e))===h)if(h=!h)v=i,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),m=i-1;m>=v;--m)u.point(N[m],A[m]);u.lineEnd(),u.areaEnd()}h&&(N[i]=+l(r,i,e),A[i]=+n(r,i,e),u.point(p?+p(r,i,e):N[i],a?+a(r,i,e):A[i]))}if(w)return u=null,w+""||null}function y(){return z().defined(o).curve(s).context(f)}return t.x=function(e){return arguments.length?(l=typeof e=="function"?e:c(+e),p=null,t):l},t.x0=function(e){return arguments.length?(l=typeof e=="function"?e:c(+e),t):l},t.x1=function(e){return arguments.length?(p=e==null?null:typeof e=="function"?e:c(+e),t):p},t.y=function(e){return arguments.length?(n=typeof e=="function"?e:c(+e),a=null,t):n},t.y0=function(e){return arguments.length?(n=typeof e=="function"?e:c(+e),t):n},t.y1=function(e){return arguments.length?(a=e==null?null:typeof e=="function"?e:c(+e),t):a},t.lineX0=t.lineY0=function(){return y().x(l).y(n)},t.lineY1=function(){return y().x(l).y(a)},t.lineX1=function(){return y().x(p).y(n)},t.defined=function(e){return arguments.length?(o=typeof e=="function"?e:c(!!e),t):o},t.curve=function(e){return arguments.length?(s=e,f!=null&&(u=s(f)),t):s},t.context=function(e){return arguments.length?(e==null?f=u=null:u=s(f=e),t):f},t}let B=class P extends b.Component{constructor(){super(...arguments),this.drawOnCanvas=(n,a)=>{const{connectNulls:p,fillStyle:o,curve:f,canvasClip:s,yAccessor:u,defined:g=P.defaultProps.defined,base:t}=this.props,{xScale:y,chartConfig:{yScale:e},plotData:i,xAccessor:v}=a;s!==void 0&&(n.save(),s(n,a)),o!==void 0&&(typeof o=="string"?n.fillStyle=o:n.fillStyle=o(n,a));const m=O(t),d=E().x(r=>Math.round(y(v(r)))).y0(r=>m(e,r,a)).y1(r=>Math.round(e(u(r))));f!==void 0&&d.curve(f),p||d.defined(r=>g(u(r))),n.beginPath(),d.context(n)(i),n.fill(),s!==void 0&&n.restore()}}render(){return b.createElement(D,{canvasDraw:this.drawOnCanvas,canvasToDraw:q,drawOn:["pan"]})}};B.defaultProps={connectNulls:!1,defined:l=>l!==void 0&&!isNaN(l),base:l=>V(l.range())};const C=class C extends b.Component{constructor(){super(...arguments),this.drawOnCanvas=(n,a)=>{const{connectNulls:p,fillStyle:o,curve:f,canvasClip:s,yAccessor:u,defined:g=C.defaultProps.defined,base:t}=this.props,{xScale:y,chartConfig:{yScale:e},plotData:i,xAccessor:v}=a;s!==void 0&&(n.save(),s(n,a)),o!==void 0&&(typeof o=="string"?n.fillStyle=o:n.fillStyle=o(n,a));const m=O(t),d=E().x(r=>Math.round(y(v(r)))).y0(r=>m(e,r,a)).y1(r=>Math.round(e(u(r))));f!==void 0&&d.curve(f),p||d.defined(r=>g(u(r))),n.beginPath(),d.context(n)(i),n.fill(),s!==void 0&&n.restore()}}render(){return b.createElement(D,{canvasDraw:this.drawOnCanvas,canvasToDraw:q,drawOn:["pan"]})}};C.defaultProps={connectNulls:!1,defined:n=>n!==void 0&&!isNaN(n),base:n=>V(n.range())};let S=C;try{S.displayName="AreaOnlySeries",S.__docgenInfo={description:"`AreaOnlySeries` component.",displayName:"AreaOnlySeries",props:{base:{defaultValue:{value:"(yScale: ScaleContinuousNumeric<number, number>) => first(yScale.range())"},description:"The base y value to draw the area to.",name:"base",required:!1,type:{name:"number | ((yScale: ScaleContinuousNumeric<number, number, never>, d: [number, number], moreProps: any) => number | undefined) | undefined"}},canvasClip:{defaultValue:null,description:"",name:"canvasClip",required:!1,type:{name:"((context: CanvasRenderingContext2D, moreProps: any) => void) | undefined"}},connectNulls:{defaultValue:{value:"false"},description:"Wether to connect the area between undefined data points.",name:"connectNulls",required:!1,type:{name:"boolean | undefined"}},curve:{defaultValue:null,description:"A factory for a curve generator for the area.",name:"curve",required:!1,type:{name:"CurveFactory | undefined"}},defined:{defaultValue:{value:"(d: number | undefined) => d !== undefined && !isNaN(d)"},description:"The default accessor for defined returns not NaN, thus assumes that the input data is always a number.",name:"defined",required:!1,type:{name:"((data: number | undefined) => boolean) | undefined"}},fillStyle:{defaultValue:null,description:"Color, gradient, or pattern to use for fill.",name:"fillStyle",required:!1,type:{name:"string | ((context: CanvasRenderingContext2D, moreProps: any) => string | CanvasGradient | CanvasPattern) | undefined"}},yAccessor:{defaultValue:null,description:"Selector for data to plot.",name:"yAccessor",required:!0,type:{name:"(data: any) => number | undefined"}}}}}catch{}export{B as A,S as a};
