import{r as f,R as e}from"./index-CTzypqlY.js";import{A as m,a as h}from"./AreaOnlySeries-C6tSr0xD.js";import{L as y}from"./LineSeries-5eeGgUw4.js";import{L as v}from"./LineSeries-Da9A-Bbt.js";let S=class extends f.Component{render(){const{baseAt:l,connectNulls:a,strokeStyle:o,strokeWidth:i,strokeDasharray:u,fillStyle:d,curve:t,canvasClip:r,yAccessor:n}=this.props;return e.createElement("g",null,e.createElement(m,{connectNulls:a,yAccessor:n,curve:t,base:l,fillStyle:d,canvasClip:r}),e.createElement(y,{connectNulls:a,yAccessor:n,strokeStyle:o,strokeWidth:i,strokeDasharray:u,curve:t,canvasClip:r,highlightOnHover:!1}))}};S.defaultProps={fillStyle:"rgba(33, 150, 243, 0.1)",strokeStyle:"#2196f3",strokeWidth:3,strokeDasharray:"Solid"};const c=class c extends f.Component{render(){const{baseAt:l,connectNulls:a,strokeStyle:o,strokeWidth:i,strokeDasharray:u,fillStyle:d,curve:t,canvasClip:r,yAccessor:n}=this.props;return e.createElement("g",null,e.createElement(h,{connectNulls:a,yAccessor:n,curve:t,base:l,fillStyle:d,canvasClip:r}),e.createElement(v,{connectNulls:a,yAccessor:n,strokeStyle:o,strokeWidth:i,strokeDasharray:u,curve:t,canvasClip:r,highlightOnHover:!1}))}};c.defaultProps={fillStyle:"rgba(33, 150, 243, 0.1)",strokeStyle:"#2196f3",strokeWidth:3,strokeDasharray:"Solid"};let s=c;try{s.displayName="AreaSeries",s.__docgenInfo={description:"`AreaSeries` component is similar to a `LineSeries` but with the area between the line and base filled.",displayName:"AreaSeries",props:{baseAt:{defaultValue:null,description:"The base y value to draw the area to.",name:"baseAt",required:!1,type:{name:"number | ((yScale: ScaleContinuousNumeric<number, number, never>, d: [number, number], moreProps: any) => number) | undefined"}},canvasClip:{defaultValue:null,description:"",name:"canvasClip",required:!1,type:{name:"((context: CanvasRenderingContext2D, moreProps: any) => void) | undefined"}},connectNulls:{defaultValue:null,description:"Whether to connect the area between undefined data points.",name:"connectNulls",required:!1,type:{name:"boolean | undefined"}},fillStyle:{defaultValue:{value:"rgba(33, 150, 243, 0.1)"},description:"Color, gradient, or pattern to use for fill.",name:"fillStyle",required:!1,type:{name:"string | ((context: CanvasRenderingContext2D, moreProps: any) => string | CanvasGradient | CanvasPattern) | undefined"}},curve:{defaultValue:null,description:"A factory for a curve generator for the area and line.",name:"curve",required:!1,type:{name:"CurveFactory | undefined"}},strokeStyle:{defaultValue:{value:"#2196f3"},description:"Color, gradient, or pattern to use for the stroke.",name:"strokeStyle",required:!1,type:{name:"string | undefined"}},strokeDasharray:{defaultValue:{value:"Solid"},description:"Stroke dash.",name:"strokeDasharray",required:!1,type:{name:"enum",value:[{value:"undefined"},{value:'"Solid"'},{value:'"ShortDash"'},{value:'"ShortDash2"'},{value:'"ShortDot"'},{value:'"ShortDashDot"'},{value:'"ShortDashDotDot"'},{value:'"Dot"'},{value:'"Dash"'},{value:'"LongDash"'},{value:'"DashDot"'},{value:'"LongDashDot"'},{value:'"LongDashDotDot"'}]}},strokeWidth:{defaultValue:{value:"3"},description:"Stroke width.",name:"strokeWidth",required:!1,type:{name:"number | undefined"}},yAccessor:{defaultValue:null,description:"Selector for data to plot.",name:"yAccessor",required:!0,type:{name:"(data: any) => number | undefined"}}}}}catch{}export{S as A,s as a};
